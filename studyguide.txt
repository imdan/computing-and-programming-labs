Positional Number Systems

    - Decimal (Base 10)
        - Digits used: 0-9
            - 10 = 1 group of ten and 0 ones
            - 11 = 1 group of ten and 1 ones
            - 21 = 2 groups of ten and 1 ones
            - 100 = 1 group of a hundred, 0 tens, 0 ones

    - Base 5 
        - Digits used: 0-4
            - 10 = 1 group of 5, 0 ones
                - 10-14
            - 20-24 30-32 40-44 etc...

    - Octal (Base 8)
        - Digits used: 0-7
        - 10-17 20-27 etc...

    - Binary (Base 2)
        - Digits used: 0-1
        - 0, 1, 10, 11, 100, 101, 110, 111, 1000, etc...

    - Hexadecimal (Base 16)
        - Digits used: 0-9...a, b, c, d, e, f
        - f = 15 (decimal)
        - After f would be 10, which = 1 group of fifteen, 0 ones
        - 10-19...1a, 1b, 1c...1f, 20, etc...

Base Conversions: Equivalent Representations

    - (13)b10 = (15)b8 = (23)b5 = (1101)b2 = (d)b16

    - To Decimal:

        - (375)b10 = 5 * 10^0 + 7 * 10^1 + 3 * 10^2 = 375

        - (125)b8 = 5 * 8^0 + 2 * 8^1 + 1 * 8^2 = 85

        - (1011)b2 = 1 * 2^0 + 1 * 2^1 + 0 * 2^2 + 1 * 2^3 = 11

        - (A@n...A@2A@1A@0)baseb = A@0 * b^0 + A@1 * b^1 + A@2 * b^2 +...+A@n * b^Number 
            -   this makes sense right....
        
    - From Decimal: 

        - (75)b10 = (0   1   0   0   1   0   1   1)b2
                    ___ ___ ___ ___ ___ ___ ___ ___
                    2^7 2^6 2^5 2^4 2^3 2^2 2^1 2^0
                    128 64  32  16   8   4   2   1

    - Binary to Hexadecimal

        - (369)b16 = (0011 1011 1001)b2
                       3     6    9

        - Convert each digit to 4 digit binary, same for binary -> hex 

Hello World

 - In computer science we design <algorithms> to solve <computational problems>. We then implement them in a formal <programming language> which would be <executed by a computer>.

    - Computational Problems
        - Define set of legal inputs
        - Define the required out for each inputs
        - ex. The sorting problems
            - input: sequence of numbers
            - output: a reordering of the input sequence

    - Algorithm
        - A well defined set of instructions that transforms the input into the output
        - ex. Alg for sorting n = 2 numbers:
            1. print "Please enter two numbers"
            2. number1 (read number from a user)
            3. number2 (read number from user)
            4. if (number1 < number2):
                4.1 print number1
                4.2 print number2
               else:
                4.1 print number2
                4.2 print number1

    - Process of Executing a Program
        - Program stored in secondary memory (sequence of bytes)
        - copied to RAM when started
        - Ran by the CPU
        - Fetch -> Decode -> execute
            - For each instruction, line by line

    - The Build Process
        - Machine language 
            - Binary
        - High level language
            - python, c, etc.
            - programs written in high level
        - Translation from high level to Machine
            - Compilation: equivilant program from high level to Machine
            - Interpolation: translate expressino by expression

Basic Interaction with the Python Interpretor

    - Types
        - int, float, string, lists
    
    - console mode and script/ide mode

    - Input and output
        - input()
            - prompts user for input (>?)
            - always reads as a string
        - print()
            - outputs value or statement
            - similar to console.log() in javascript

Numerical data types and arithmetic expressions

    - The int data types  
        - integer numbers

        - Inner Representation
            - Twos complement:
                - In a k-bit twos complement representation of a number:
                    - A positive int is represented in its (k-1)-bit unsigned binary representation, padded with a 0 to its left
                    - The sum of a number and its additivce inverse is 2^k
                        - (26)b10 = (00011010) 8 bit 2s complement
                        - (-26)b10 = (11100110) 8 bit 2s complement

        - Python Literals:
            - 3,4,-6,3954
            - integers
            - built in values
        
        - Arithmetic Operators
            - +, -, *, /, **, //, %

    - The Float Data type

        - Kind of data: real number, can have fractional part

        - Inner representation:
            - Numbers are represented by the floating point method
            - IEEE-754
            - Sequence of bytes
        
        - Python Literals: 
            - 3.4, 6.0, 0.008975, 8.975e-3
        
        - Arithmetic Operators
            - +, -, *, /, **, //, %

Branching Statements

    - The bool data type
        - Kind of data: truthy value (true/false)

        - Inner representation
            - False is representated by a series of 0s
            - True is any non-zero value

        - Python Literals:
            - True, False

        - Boolean Operators
            - not, and, or
        
        - Boolean expressions
            - Atomic boolean expressions
                - The bool Literals
                    - True, False
                    - Arithmatic w/ relational Operators (<, >, ...)
                - Compound boolean expressions
                    - simple boolean expressions combined with boolean operators (not, and, or)

    - if Statements
        - didnt take many notes here, but yeah conditional statements

            if (condition == True):
                execute code block

    - Two-way branching statements
        - if-else statements
        - guarantees that one out the two blocks of code will be executed
        - no way for zero or both blocks to be executed

    - sequential if statements
        - (multiple if statements in a row)
        - can lead to zero, one, or two blocks of code being executed

    - if-elif-else statements
        - self explanatory

Iterative Statements

    - while statements (loops)
        
        while(boolean):
            while boolean is true execute indented code
    
    - for statements
        
        for var in iterable-collection:
            indented code block

    - for and while are basically equivilant, for is preferred if possible

    - range function

        - use w/ for loops    
            for n in range

        - range(start, end)
            - a sequence of integers [start, end]
            - ex: range(6) -> <1,2,3,4,5>
            - non-inclusive end

        - range(end)
            - sequence of integers in [0, end]
            - ex: range(6) -> <0,1,2,3,4,5>

        - range(start, end, step)
            - sequence of the integers in [start, end] by step
            - ex: range(1,6,2) -> <1,3,5>

Strings

    - sequence of characters

    - inner representation:
        - ASCII Table
        - unicode values   
            - "a" -> 97 = (01100001)b2
        - sequence of unicode values representated in binary

    - Literals: 'abc', "abc"
        - \n for line break
        - \t for Tab
        - \ before char to escape char (ex. \\)

    - Operators: +, *, ==, !=, <, >, <=, >=
        - strings are compared (<, >) by alpabetical order
    
    - Functions
        - len(string), print(string)

    - sequential properties
        - Indexing: 
            - str[i]
            - zero-based
        - Slicing:
            - str[i:n]
                - give start and end
                - end index is excluded
            - str[:4]
                - omit start to start at 0
            - str[4:]
                - omit end to go through end
            - slicing creates new substring
    
    - Methods
        - str
            .upper()
            .lower()
            .isupper()
            .islower()
            .isdigit()
            find(str)
        - for more info on method call help(str.method)

Functions

    def name(param):
        code block

    - Function call as control flow
        - jumps to function def then back to code following function call
    
    - functions need to be defined before being called
    - start with main function def then other function defs and call main() at end of script


Lists

    - A mutable, iterable, sequential collection

    - Literals: [1,2,3], [1, "abc", 3.4], [1,2,[3,4]]

    - Operators: 
        - + will concatenate lists
        - * will duplicate x number of times

    - Boolean operators:
        - ==, !=, <, >, <=, >=, in, not in

        >>> 2 in [1,2,3]
            True

    - Indexing
        - lsr[i]
    
    - Slicing
        - lst[1:4]
        - lst[start:end]

    - Functions:
        - len(lst) -> length of list
        - min(lst) -> returns minimum value
        - max(lst) -> returns max value
        - sum(lst) -> returns sum of list

    - Iterable collection
        - Can iterate over list using for loops

            for item in list:
                do something

    List methods:
        - lst
            .append(obj)
                - adds item to end of list
            .insert(ind, obj)
            .extend([collection])
                - extends list w/ collection items passed in
            .pop()
                - removes last item and returns item
            .pop(ind)
                - removes item at ind and returns item
            .index(obj)
                - searches for obj and returns index of first instance
            .count(obj)
                - returns number of instances of obj
            .reverse()
            .sort()



    
        
        








